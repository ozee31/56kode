---
import { getCollection, type CollectionEntry } from "astro:content";
import TagPosts from "@layouts/TagPosts.astro";
import getPostsByTag from "@utils/getPostsByTag";
import getPagination from "@utils/getPagination";
import { getUniqueTagsForAllPosts } from "@utils/getUniqueTags";

export async function getStaticPaths() {
  const blogPosts = await getCollection("blog");
  const techwatchPosts = await getCollection("techwatch");
  const tags = getUniqueTagsForAllPosts(blogPosts, techwatchPosts);

  return tags.map(({ tag, tagName }) => {
    return {
      params: { tag },
      props: { tag, tagName, blogPosts, techwatchPosts },
    };
  });
}

const { tag, tagName, blogPosts, techwatchPosts } = Astro.props;

const postsByTag = getPostsByTag(blogPosts, tag) as CollectionEntry<"blog">[];
const techWatchPostsByTag = getPostsByTag(
  techwatchPosts,
  tag
) as CollectionEntry<"techwatch">[];

// Get separate pagination for each type
const blogPagination = getPagination({
  posts: postsByTag,
  page: 1,
  isIndex: true,
});

const techWatchPaginationData = getPagination({
  posts: techWatchPostsByTag,
  page: 1,
  isIndex: true,
});

// Calculate total pages as the maximum of both types
const totalPages = Math.max(
  blogPagination.totalPages,
  techWatchPaginationData.totalPages
);

// Create pagination objects for the layout with the global total pages
const pagination = {
  currentPage: 1,
  totalPages: totalPages,
  paginatedPosts: blogPagination.paginatedPosts,
};

const techWatchPagination = {
  currentPage: 1,
  totalPages: totalPages,
  paginatedPosts: techWatchPaginationData.paginatedPosts,
};
---

<TagPosts
  {...pagination}
  {tag}
  {tagName}
  techWatchPagination={techWatchPagination}
/>
